/*
 * oncokb-transcript API
 * oncokb-transcript API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.oncokb.oncokb_transcript.client;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.oncokb.oncokb_transcript.client.DrugSynonym;
/**
 * Drug
 */


public class Drug {
  @SerializedName("code")
  private String code = null;

  @SerializedName("drugSynonyms")
  private List<DrugSynonym> drugSynonyms = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("semanticType")
  private String semanticType = null;

  public Drug code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @Schema(description = "")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public Drug drugSynonyms(List<DrugSynonym> drugSynonyms) {
    this.drugSynonyms = drugSynonyms;
    return this;
  }

  public Drug addDrugSynonymsItem(DrugSynonym drugSynonymsItem) {
    if (this.drugSynonyms == null) {
      this.drugSynonyms = new ArrayList<DrugSynonym>();
    }
    this.drugSynonyms.add(drugSynonymsItem);
    return this;
  }

   /**
   * Get drugSynonyms
   * @return drugSynonyms
  **/
  @Schema(description = "")
  public List<DrugSynonym> getDrugSynonyms() {
    return drugSynonyms;
  }

  public void setDrugSynonyms(List<DrugSynonym> drugSynonyms) {
    this.drugSynonyms = drugSynonyms;
  }

  public Drug id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Drug name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Drug semanticType(String semanticType) {
    this.semanticType = semanticType;
    return this;
  }

   /**
   * Get semanticType
   * @return semanticType
  **/
  @Schema(description = "")
  public String getSemanticType() {
    return semanticType;
  }

  public void setSemanticType(String semanticType) {
    this.semanticType = semanticType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Drug drug = (Drug) o;
    return Objects.equals(this.code, drug.code) &&
        Objects.equals(this.drugSynonyms, drug.drugSynonyms) &&
        Objects.equals(this.id, drug.id) &&
        Objects.equals(this.name, drug.name) &&
        Objects.equals(this.semanticType, drug.semanticType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, drugSynonyms, id, name, semanticType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Drug {\n");
    
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    drugSynonyms: ").append(toIndentedString(drugSynonyms)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    semanticType: ").append(toIndentedString(semanticType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
